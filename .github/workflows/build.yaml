name: "Build & Test"

on:
  push:
    branches:
      - main
      - "release/*"
  pull_request:
  workflow_dispatch:
    inputs:
      override-cdt:
        description: 'Override cdt target'
        type: string
      override-cdt-prerelease:
        type: choice
        description: Override cdt prelease
        options:
        - default
        - true
        - false
      override-eos-system-contracts:
        description: 'Override eos-system-contracts ref'
        type: string

permissions:
  packages: read
  contents: read

defaults:
  run:
    shell: bash

jobs:
  platform-cache:
    name: Platform Cache
    uses: AntelopeIO/platform-cache-workflow/.github/workflows/platformcache.yaml@v1
    permissions:
      packages: write
      contents: read
    with:
      runs-on: '["self-hosted", "enf-x86-beefy"]'
      platform-files: |
        .cicd/platforms
        tools/reproducible.Dockerfile:builder

  build-base:
    name: Run Build Workflow
    uses: ./.github/workflows/build_base.yaml
    needs: [platform-cache]
    with:
      platforms: ${{needs.platform-cache.outputs.platforms}}
      platform-list: ${{needs.platform-cache.outputs.platform-list}}

  v:
    name: Discover Versions
    runs-on: ubuntu-latest
    outputs:
      cdt-target: ${{steps.versions.outputs.cdt-target}}
      cdt-prerelease: ${{steps.versions.outputs.cdt-prerelease}}
      eos-system-contracts-ref: ${{steps.versions.outputs.eos-system-contracts-ref}}
    steps:
      - name: Setup cdt and eos-system-contracts versions
        id: versions
        env:
          GH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          DEFAULTS_JSON=$(curl -sSfL $(gh api https://api.github.com/repos/${{github.repository}}/contents/.cicd/defaults.json?ref=${{github.sha}} --jq .download_url))
          echo cdt-target=$(echo "$DEFAULTS_JSON" | jq -r '.cdt.target') >> $GITHUB_OUTPUT
          echo cdt-prerelease=$(echo "$DEFAULTS_JSON" | jq -r '.cdt.prerelease') >> $GITHUB_OUTPUT
          echo eos-system-contracts-ref=$(echo "$DEFAULTS_JSON" | jq -r '.eossystemcontracts.ref') >> $GITHUB_OUTPUT

          if [[ "${{inputs.override-cdt}}" != "" ]]; then
            echo cdt-target=${{inputs.override-cdt}} >> $GITHUB_OUTPUT
          fi
          if [[ "${{inputs.override-cdt-prerelease}}" == +(true|false) ]]; then
            echo cdt-prerelease=${{inputs.override-cdt-prerelease}} >> $GITHUB_OUTPUT
          fi
          if [[ "${{inputs.override-eos-system-contracts}}" != "" ]]; then
            echo eos-system-contracts-ref=${{inputs.override-eos-system-contracts}} >> $GITHUB_OUTPUT
          fi

  tests:
    name: Tests (${{matrix.cfg.name}})
    needs: [platform-cache, build-base]
    strategy:
      fail-fast: false
      matrix:
        include:
          - cfg: {name: 'ubuntu20',      base: 'ubuntu20', builddir: 'ubuntu20'}
    runs-on: ["self-hosted", "enf-x86-hightier"]
    container:
      image: ${{fromJSON(needs.platform-cache.outputs.platforms)[matrix.cfg.base].image}}
      options: --security-opt seccomp=unconfined --mount type=bind,source=/var/lib/systemd/coredump,target=/cores
    steps:
      - uses: actions/checkout@v4
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.cfg.builddir}}-build
      - name: Run Parallel Tests
        run: |
          # https://github.com/actions/runner/issues/2033  -- need this because of full version label test looking at git revs
          chown -R $(id -u):$(id -g) $PWD
          zstdcat build.tar.zst | tar x
          cd build
          ctest --output-on-failure -j $(nproc) -LE "(nonparallelizable_tests|long_running_tests)" --timeout 420
      - name: Upload core files from failed tests
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{matrix.cfg.name}}-tests-logs
          if-no-files-found: ignore
          path: /cores
      - name: Check CPU Features
        run: awk 'BEGIN {err = 1} /bmi2/ && /adx/ {err = 0} END {exit err}' /proc/cpuinfo

  np-tests:
    name: NP Tests (${{matrix.cfg.name}})
    needs: [platform-cache, build-base]
    strategy:
      fail-fast: false
      matrix:
        include:
          - cfg: {name: 'ubuntu20',      base: 'ubuntu20', builddir: 'ubuntu20'}
    runs-on: ["self-hosted", "enf-x86-midtier"]
    steps:
      - uses: actions/checkout@v4
      - name: Download builddir
        uses: actions/download-artifact@v3
        with:
          name: ${{matrix.cfg.builddir}}-build
      - name: Run tests in parallel containers
        uses: ./.github/actions/parallel-ctest-containers
        with:
          container: ${{fromJSON(needs.platform-cache.outputs.platforms)[matrix.cfg.base].image}}
          error-log-paths: '["build/etc", "build/var", "build/leap-ignition-wd", "build/TestLogs"]'
          log-tarball-prefix: ${{matrix.cfg.name}}
          tests-label: nonparallelizable_tests
          test-timeout: 420
      - name: Upload logs from failed tests
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{matrix.cfg.name}}-np-logs
          path: |
            '*-logs.tar.gz'
            /cores
